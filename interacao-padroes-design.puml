@startuml Intera√ß√£o dos Padr√µes de Design
!theme plain
title Intera√ß√£o dos Padr√µes de Design\nSistema de Gest√£o de Exames M√©dicos

package "üèóÔ∏è Padr√µes Criacionais" {
    class GeradorId <<Singleton>> {
        - instance: GeradorId {static}
        - contador: int
        + getInstance(): GeradorId {static}
        + gerarId(): int
    }
}

package "üèõÔ∏è Padr√µes Estruturais" {
    class LaboratorioFachada <<Facade>> {
        - fila: FilaPrioridadeExame
        - geradorId: GeradorId
        - precoVisitor: ExameVisitor<Double>
        + requisitarExame(): ExameOrdem
        + calcularPreco(): double
        + emitirLaudoComNotificacao(): void
    }
    
    abstract class DescontoBase <<Decorator>> {
        - wrappee: Desconto
        + calcularPreco(): Double
    }
    
    class DescontoIdoso <<Decorator>> {
        + calcularPreco(): Double [8% off]
    }
    
    class DescontoConvenio <<Decorator>> {
        + calcularPreco(): Double [15% off]
    }
    
    interface ILaudo <<Bridge - Abstraction>> {
        + gerarDocumento(): Object
    }
    
    class LaudoTxt <<Bridge - ConcreteImplementation>> {
        + gerarDocumento(): String
    }
    
    class LaudoPdf <<Bridge - ConcreteImplementation>> {
        + gerarDocumento(): byte[]
    }
    
    abstract class ExameProcedimento <<Bridge - RefinedAbstraction>> {
        - laudo: ILaudo
        + gerarLaudo(): Object
        + montarTxt(): StringBuilder
        + montarPDF(): Document
    }
}

package "üéØ Padr√µes Comportamentais" {
    interface InserirExameStrategy <<Strategy>> {
        + inserir(): void
    }
    
    class InserirUrgente <<Strategy>> {
        + inserir(): void [priority queue]
    }
    
    class FilaPrioridadeExame <<Strategy Context>> {
        - strategies: Map<Prioridade, Strategy>
        + adicionarExame(): void
    }
    
    interface ExameVisitor <<Visitor>> {
        + visitarExame(): T
    }
    
    class PrecoVisitor <<Visitor>> {
        + visitarExame(ExameSangue): Double [15.00]
        + visitarExame(ExameRaioX): Double [70.00]
        + visitarExame(ExameColonoscopia): Double [400.00]
    }
    
    interface IValidador <<Chain of Responsibility>> {
        + validar(): void
        + setProximo(): IValidador
    }
    
    class ValidadorColonoscopia <<Chain Handler>> {
        + validar(): void [descricao, endoscopista]
    }
    
    class ValidadorFachada <<Chain Client>> {
        + getChainExameEndoscopico(): IValidador {static}
        + getChainExameImagem(): IValidador {static}
    }
    
    interface INotificador <<Observer>> {
        + notificar(): void
        + notificarComAnexo(): void
    }
    
    class NotificardorEmail <<Observer>> {
        + notificarComAnexo(): void
        - criarArquivoLaudo(): File
    }
}

package "üìä Modelos de Dom√≠nio" {
    class ExameOrdem {
        - id: int
        - paciente: Paciente
        - exameTipo: ExameProcedimento
        - prioridade: Prioridade
    }
    
    class Paciente {
        - nome: String
        - idade: int
        - email: String
    }
    
    enum Prioridade {
        URGENTE
        POUCO_URGENTE
        ROTINA
    }
}

' ==================== RELACIONAMENTOS ENTRE PADR√ïES ====================

' Facade orquestra todos os outros padr√µes
LaboratorioFachada ..> GeradorId : <<uses Singleton>>
LaboratorioFachada ..> FilaPrioridadeExame : <<uses Strategy>>
LaboratorioFachada ..> PrecoVisitor : <<uses Visitor>>
LaboratorioFachada ..> DescontoBase : <<uses Decorator>>
LaboratorioFachada ..> ValidadorFachada : <<uses Chain>>
LaboratorioFachada ..> ILaudo : <<uses Bridge>>

' Strategy Pattern interactions
FilaPrioridadeExame --> InserirExameStrategy : <<context uses>>
InserirUrgente ..|> InserirExameStrategy
FilaPrioridadeExame --> Prioridade : <<maps to strategy>>

' Decorator Pattern chain
DescontoIdoso --|> DescontoBase
DescontoConvenio --|> DescontoBase
DescontoBase --> DescontoBase : <<wraps>>

' Visitor Pattern
ExameProcedimento ..> ExameVisitor : <<accepts>>
PrecoVisitor ..|> ExameVisitor

' Chain of Responsibility
ValidadorFachada ..> IValidador : <<creates chain>>
ValidadorColonoscopia ..|> IValidador
ValidadorColonoscopia --> ValidadorColonoscopia : <<next handler>>

' Bridge Pattern
ExameProcedimento --> ILaudo : <<uses implementation>>
LaudoTxt ..|> ILaudo
LaudoPdf ..|> ILaudo

' Observer Pattern
ExameProcedimento --> INotificador : <<notifies observers>>
NotificardorEmail ..|> INotificador

' Domain relationships
ExameOrdem --> ExameProcedimento : <<contains>>
ExameOrdem --> Paciente : <<contains>>
ExameOrdem --> Prioridade : <<has>>

' ==================== FLUXO DE INTERA√á√ÉO ====================
note as N1
**üîÑ Fluxo de Intera√ß√£o dos Padr√µes:**

1Ô∏è‚É£ **Facade** recebe requisi√ß√£o do cliente
2Ô∏è‚É£ **Singleton** gera ID √∫nico para o exame
3Ô∏è‚É£ **Visitor** calcula pre√ßo baseado no tipo
4Ô∏è‚É£ **Decorator** aplica descontos em camadas
5Ô∏è‚É£ **Strategy** insere na fila por prioridade
6Ô∏è‚É£ **Chain** valida dados sequencialmente
7Ô∏è‚É£ **Bridge** gera laudo no formato escolhido
8Ô∏è‚É£ **Observer** notifica paciente automaticamente
end note

note as N2
**üéØ Benef√≠cios da Arquitetura:**

‚úÖ **Baixo Acoplamento**: Cada padr√£o resolve uma responsabilidade espec√≠fica
‚úÖ **Alta Coes√£o**: Funcionalidades relacionadas agrupadas
‚úÖ **Extensibilidade**: Novos tipos facilmente adicionados
‚úÖ **Testabilidade**: Cada padr√£o pode ser testado isoladamente
‚úÖ **Manutenibilidade**: Mudan√ßas localizadas por padr√£o
end note

note as N3
**üîß Padr√µes Principais em A√ß√£o:**

üèõÔ∏è **Facade**: Interface unificada simplifica complexidade
üéØ **Strategy**: Flexibilidade na inser√ß√£o por prioridade
üé® **Decorator**: Combina√ß√£o flex√≠vel de descontos
üë• **Visitor**: Opera√ß√µes sobre hierarquia sem modific√°-la
üîó **Chain**: Valida√ß√£o modular e extens√≠vel
üåâ **Bridge**: Separa√ß√£o entre exames e formatos
üëÄ **Observer**: Notifica√ß√£o autom√°tica desacoplada
end note

@enduml
